import time
import logging
import re

from aiogram import Bot, Dispatcher, executor, types

from database import BotDB

TOKEN = '5982878085:AAFm4tJUlFMQW_tYwXGnT4NkLLC5AjJNgWc'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)
db = 'BOT_database.db'

Bot_DB = BotDB(db)

@dp.message_handler(commands = 'start')
async def start(message: types.Message):
    user_full_name = message.from_user.full_name
    logging.info(f'{message.from_user.id} {user_full_name=} {time.asctime()}')
    if(not Bot_DB.user_exists(message.from_user.id)):
        Bot_DB.add_user(message.from_user.id)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name} üôÇ\n–Ø –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º!\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥")

@dp.message_handler(commands = ('help'), commands_prefix = '/!')
async def hepl(message: types.Message):
    await message.reply('üÜò –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/spent (—Å—É–º–º–∞) (–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤) - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤\n/earned (—Å—É–º–º–∞) (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤) - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤\n‚ùï –°—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n‚ùï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –º–æ–∏—Ö —Ä–∞—Å—á—ë—Ç–∞—Ö, –∏ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –∏—Ö\n/statistics - –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤\n/total - –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n/history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π\n/delete (–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ò—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π) - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n‚ùï –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete all')

@dp.message_handler(commands = ('spent', 'earned'),  commands_prefix = '/!') #–º–æ–∂–Ω–æ –ª–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
async def record(message: types.Message):
    commands_var = (('/spent', '!spent'), ('/earned', '!earned'))
    operation = '-' if message.text.startswith(commands_var[0]) else '+'
    mes =  message.text
    if len(list(mes.split(' '))) == 3:
        value, category = mes.split(' ')[1], mes.split(' ')[2].strip()
        if len(value) > 0 and len(category) > 0:
            x = re.findall(r"\d+(?:.\d+)?", value)
            if(len(x)):
                value = float(x[0].replace(',', '.'))
                Bot_DB.add_record(message.from_user.id, operation, value, category)
                if operation == '-': #—Å–±–∏–ª–æ—Å—å —É—Å–ª–æ–≤–∏–µ, –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥
                    await message.reply('‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞')
                else:
                    await message.reply('‚úÖ –ó–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞')
            else:
                await message.reply('‚ùï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
    else:
        await message.reply('‚ùï –ù–µ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ –ª–∏–±–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')

@dp.message_handler(commands = ('history', 'h'), commands_prefix = '/!') #–º–æ–∂–Ω–æ –ª–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
async def history(message: types.Message):
    records = Bot_DB.get_records(message.from_user.id)
    if len(records) > 0:
        answer = f'üïú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n'
        for r in records:
            answer += f'{records.index(r) + 1}. '
            answer += '‚ûñ' if r[2] == '-' else '‚ûï'
            answer += f'{r[3]} z≈Ç.\n    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {r[5]}\n    –î–∞—Ç–∞: {r[4]}\n'
        await message.reply(answer)
    else:
        await message.reply('‚ùï –ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')

@dp.message_handler(commands = ('statistics'), commands_prefix = '/!')
async def statistics(message: types.Message):
    records = Bot_DB.get_records(message.from_user.id)
    if len(records) > 0:
        answer = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤:\n\n'
        res_p = {}
        res_l = {}
        p = 0
        l = 0
        for r in records:
            if r[2] == '+':
                p += r[3]
                res_p[r[5]] = res_p.get(r[5], 0) + r[3]
            else:
                l += r[3]
                res_l[r[5]] = res_l.get(r[5], 0) + r[3]
        max_p = [i for i in res_p if res_p[i] == max(res_p.values())]
        max_l = [j for j in res_l if res_l[j] == max(res_l.values())]
        await message.reply(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤:\n\n–ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ: {p} z≈Ç\n–ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: {l}z≈Ç\n–ù–∞–∏–±–æ–ª—å—à–∞—è –¥–æ–ª—è –¥–æ—Ö–æ–¥–æ–≤ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–∏: {', '.join(max_p)}\n–ù–∞–∏–±–æ–ª—å—à–∞—è –¥–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–∏: {', '.join(max_l)}\n")
    else:
        await message.reply('‚ùï –ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')

@dp.message_handler(commands = ('total'), commands_prefix = '/!')
async def total(message: types.Message):
    records = Bot_DB.get_records(message.from_user.id)
    result = 0
    if len(records) > 0:
        for r in records:
            if r[2] == '+':
                result += r[3]
            else:
                result -= r[3]
        await message.reply(f"üí∏ –í—Å–µ–≥–æ: {result} z≈Ç")
    else:
        await message.reply('‚ùï –ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')

@dp.message_handler(commands = ('delete'), commands_prefix = '/!')
async def total(message: types.Message):
    records = Bot_DB.get_records(message.from_user.id)
    delete_record = message.text.split(' ')[1].strip()
    if delete_record == 'all':
        answer = Bot_DB.delete_all(message.from_user.id)
        await message.reply(answer)
    elif delete_record.isdigit() and int(delete_record) <= len(records) + 1:
        record_date = records[int(delete_record)-1][4]
        answer = Bot_DB.delete_record(message.from_user.id, record_date)
        await message.reply(answer)
    else:
        await message.reply('‚ùï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')

if __name__ == '__main__':
    executor.start_polling(dp)