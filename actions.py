from aiogram import types, executor
from dispatcher import dp
import config
import re
from bot import Bot_DB


@dp.message_handler(commands = 'start') #–º–æ–∂–Ω–æ –ª–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
async def start(message: types.Message):
	if(not Bot_DB.user_exists(message.from_user_id)):
		Bot_DB.add_user(message.from_user_id)
	await message.bot.send_message(message.from_user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')

@dp.message_hansler(commands = ('spend', 's', 'earned', 'e'), commands_prefix = '/!')
async def record(message: types.Message):
	commands_var = ('/spent', '/s'), ('/earned', 'e') #—É–±—Ä–∞–ª–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
	operation = '-' if message.text.startwith(commands_var[0]) else '+'
	value = message.text
	for i in commands_var:
		for j in i:
			value = value.replace(j, '').strip()
	if(len(value)):
		x = re.findall(r'\d+(?:.\d+)?')
		if(len(x)):
			value = float(x[0].replace(',', '.'))
			Bot_DB.add_record(message.from_user.id, operation, value)
			if(operation == '-'):
				await message.reply('‚úî –ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞')
			else:
				await message.reply('‚úî –ó–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞')
		else:
			message.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
	else:
		await message.reply('‚ùå –°—É–º–º–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')

@dp.message_handler(commands = ('histiry', 'h'), commands_prefix = '/!') #–º–æ–∂–Ω–æ –ª–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
async def history(essage: types.Message):
	commands_var = ('/history', '/h')
	within_all = {'day': ('today', 'day'), 'week': ('week'), 'month': ('month'), 'year': ('year')}
	command = message.text
	for r in commands_var:
		command = command.replace(r, '').strip()
	within = 'day' #default
	if(len(command)):
		for k in within_all:
			for el in within_all[k]:
				if(el == command):
					within = k
					el_foranswer = el
	records = Bot_DB.get_records(message.from_user.id, within)
	if(len(records)):
		answer = f'üïú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {el_foranswer}'
		for r in records:
			answer +=  '‚ûñ –†–∞—Å—Ö–æ–¥' if not r[2] else '‚ûï –î–æ—Ö–æ–¥'
			answer += f' - {r[3]}'
			answer += r[4] #–ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞ –º–Ω–æ–≥–æ
		await message.reply(answer)
	else:
		await message.reply('–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')